/*
	STARTING HAND INCOME RATES

	The following are income rates for playable starting hands in expected millibets
	when 10 players played out to showdown
	Taken from Billings (2006)
*/

/*
    * Poker Academy Hand Evaluator Rankings
*/
char *preFlopPairTypes[169] = {
   "AAo", "KKo", "QQo", "JJo", "KAs", "QAs", "TTo", "QKs", "JAs", "KAo",
   "JKs", "TAs", "JQs", "TKs", "QAo", "99o", "TQs", "TJs", "QKo", "9As",
   "JAo", "9Ks", "88o", "JKo", "8As", "9Qs", "9Ts", "JQo", "9Js", "TAo",
   "7As", "5As", "TKo", "4As", "6As", "TQo", "3As", "8Ks", "TJo", "77o",
   "2As", "8Ts", "8Qs", "7Ks", "8Js", "89s", "6Ks", "66o", "5Ks", "9Ao",
   "78s", "4Ks", "7Qs", "7Ts", "79s", "9Ko", "7Js", "3Ks", "9To", "6Qs",
   "8Ao", "55o", "9Jo", "9Qo", "2Ks", "67s", "5Qs", "68s", "4Qs", "7Ao",
   "44o", "56s", "69s", "5Ao", "6Ts", "6Js", "3Qs", "2Qs", "57s", "4Ao",
   "45s", "5Js", "6Ao", "8Ko", "33o", "8To", "58s", "4Js", "3Ao", "89o",
   "22o", "46s", "8Jo", "8Qo", "3Js", "59s", "7Ko", "5Ts", "2Js", "35s",
   "2Ao", "4Ts", "47s", "3Ts", "34s", "6Ko", "48s", "78o", "2Ts", "36s",
   "5Ko", "79o", "49s", "7To", "25s", "7Qo", "39s", "7Jo", "4Ko", "37s",
   "29s", "24s", "67o", "3Ko", "38s", "6Qo", "26s", "68o", "23s", "28s",
   "2Ko", "56o", "5Qo", "69o", "27s", "6To", "4Qo", "45o", "57o", "6Jo",
   "3Qo", "5Jo", "58o", "46o", "2Qo", "4Jo", "59o", "35o", "3Jo", "5To",
   "47o", "4To", "2Jo", "34o", "3To", "48o", "36o", "2To", "49o", "25o",
   "39o", "37o", "24o", "29o", "38o", "26o", "23o", "28o", "27o" 
}; 

double startinghands_suited[13][13] =
{ 
	{2112, 	1071, 	915, 	813, 	736, 	538, 	469, 	427, 	386, 	448, 	422, 	392, 	356},
	{1071, 	1615, 	858, 	767, 	694, 	485, 	356, 	309, 	278, 	245, 	227, 	211, 	192},
	{915, 	858, 	1224, 	720,	655, 	452, 	317, 	209, 	0,		0,		0,		0,		0},
	{813, 	767, 	720,	935, 	657, 	449, 	327, 	206, 	0,		0,		0,		0,		0},
	{736, 	694, 	655, 	657, 	714, 	481, 	353, 	231, 	0,		0,		0,		0,		0},
	{538, 	485, 	452, 	449, 	481, 	553, 	338, 	245, 	0,		0,		0,		0,		0},
	{469, 	356, 	317, 	327, 	353, 	338, 	450,	270,	185, 	0,		0,		0,		0},
	{427, 	309, 	209, 	206, 	231, 	245, 	270,	364, 	222, 	141, 	0,		0,		0},
	{386, 	278, 	0,		0,		0,		0,		185, 	222, 	304, 	191, 	106, 	0,		0},
	{448, 	245, 	0,		0,		0,		0,		0,		141, 	191, 	238, 	167, 	87, 	0},
	{422, 	227, 	0,		0,		0,		0,		0,		0,		106, 	167, 	214, 	41, 	0},
	{392, 	211, 	0,		0,		0,		0,		0,		0,		0,		87, 	41, 	199, 	0},
	{356, 	192, 	0,		0,		0,		0,		0,		0,		0,		0,		0,		0,		196}
//------------------------------------------------------------------------------------------------------
//	A		K		Q		J		10		9		8		7		6		5		4		3		2
};

double startinghands_unsuited[13][13] =
{ 
	{2112, 	718, 	555, 	430, 	335, 	119, 	0, 		0, 		0,		0, 		0, 		0, 		0},
	{718, 	1615, 	515, 	391, 	306, 	85, 	0, 		0, 		0, 		0, 		0, 		0, 		0},
	{555, 	515, 	1224, 	359, 	287, 	65, 	0, 		0, 		0, 		0, 		0, 		0, 		0},
	{430, 	391, 	359, 	935, 	305, 	92, 	0, 		0, 		0, 		0, 		0, 		0, 		0},
	{335, 	306, 	287, 	305, 	714, 	127, 	0, 		0, 		0, 		0, 		0, 		0, 		0},
	{119, 	85, 	65, 	92, 	127, 	553, 	0, 		0, 		0, 		0, 		0, 		0, 		0},
	{0, 	0, 		0, 		0, 		0, 		0, 		450, 	0, 		0,		0, 		0, 		0, 		0},
	{0, 	0, 		0, 		0, 		0, 		0,		0,		364, 	0,		0,		0, 		0, 		0},
	{0, 	0, 		0, 		0, 		0, 		0, 		0, 		0, 		304, 	0, 		0, 		0, 		0},
	{0, 	0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		238, 	0, 		0, 		0},
	{0, 	0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		214, 	0,		0},
	{0, 	0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		199, 	0},
	{0, 	0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		0, 		196}
//------------------------------------------------------------------------------------------------------
//	A		K		Q		J		10		9		8		7		6		5		4		3		2};
};

double CSymbols::FoldEquity(int bitchairlist)
{
   int i,nit,loc,hits,found,progress,size;
   unsigned int opplist;
   const int full=0x1ff >> (9-(int)sym.nopponentsplaying);

   i=nit=loc=hits=found=progress=opplist=0;
   size=opponent_table.size();

   //Generate proper chair list
   //there are no inactive chairs or userchair in list supplied by prwin_thread
   for(i=0; i<10;i++)
   {
      if(!((int)symbols.sym.playersplayingbits & (1<<i))) continue; //inactive chair
      if(i==sym.userchair) continue; //user chair

      if((bitchairlist>> i) & 1) opplist |= 1 << loc; //not listed

      loc++;
   }

   //list is inverted for fast comparison
   opplist=~opplist;

   for(nit=0; nit < size;nit++)
      //if opponent_table[nit] == NULL, we win everyone (no fold eq there)
      //if (opponent_table[nit] & opplist) != NULL, there's still someone who wins us outside of given chair list
      if(opponent_table[nit] && (opponent_table[nit] & opplist)==NULL) hits++;

   return (double)hits/(double)size;
}

